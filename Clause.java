import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Clause
{
	ArrayList<Pair<String,Boolean>> data;
	Pair<Clause, Clause> parents;
	
	Boolean internalEvaluate(Pair<String, Boolean> model)
	{
		int index = Collections.binarySearch(data, model, new Pair_String());
		//check if this clause is satisfied
		if(index >=0)
		{
			if(data.get(index).equals(model))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		//if this model does not assign anything to this clause
		return null;
	}
	
	Boolean evaluate(ArrayList<Pair<String, Boolean>> model)
	{
		boolean satisfied = false;
		int isPartial = 0;
		for(int i = 0; i < model.size(); ++i)
		{
			Boolean intEval = internalEvaluate(model.get(i));
			if(intEval == null)
			{
				//do nothing
			}
			else
			{
				++isPartial;
				satisfied = satisfied || intEval;
			}
		}
		//if not every value is set then we have partial assignment
		if(isPartial < data.size())
		{
			return null;
		}
		else
		{
			return satisfied;
		}
	}
	
	private Clause cleanedUp(Clause unclean)
	{
		Clause clean = new Clause();
		for(int i = 0; i < unclean.data.size(); i++)
		{
			boolean add = true;
			for(int j = i + 1; j < unclean.data.size(); j++)
			{
				if(unclean.data.get(i).equals(unclean.data.get(j)))
				{
					add = false;
					break;
				}
			}
			if(add)
			{
				clean.data.add(unclean.data.get(i));
			}
		}
		Collections.sort(clean.data, new Pair_String());
		clean.parents = unclean.parents;
		return clean;
	}
	Clause()
	{
		data = new ArrayList<Pair<String, Boolean>>();
	}
	
	Clause(String lineIn)
	{
		data = new ArrayList<Pair<String,Boolean>>();
		StringBuilder line = new StringBuilder(lineIn);
		while(line.length() > 0)
		{
			if(line.charAt(0) == '#')
			{
				line = new StringBuilder();
			}
			//negated symbol
			else if(line.charAt(0) == '-')
			{
				StringBuilder elem = new StringBuilder();
				int stopped = 0;
				for(int i = 1; i<line.length(); ++i)
				{
					stopped = i;
					if(line.charAt(i) == ' ')
					{
						break;
					}
					else
					{
						stopped = i;
						elem.append(line.charAt(i));
					}
				}
				line.delete(0, stopped + 1);
				data.add(new Pair<String, Boolean>(elem.toString(), false));
			}
			else
			{
				StringBuilder elem = new StringBuilder();
				int stopped = 0;
				for(int i = 0; i<line.length(); ++i)
				{
					stopped = i;
					if(line.charAt(i) == ' ')
					{
						break;
					}
					else
					{
						elem.append(line.charAt(i));
					}
				}
				line.delete(0, stopped + 1);
				data.add(new Pair<String,Boolean>(elem.toString(), true));
			}
		}
		data = cleanedUp(this).data;
	}
	
	public String toString()
	{
		StringBuilder toReturn = new StringBuilder();
		for(int i = 0; i < data.size(); ++i)
		{
			if(data.get(i).elem1)
			{
				//no negation
			}
			else
			{
				//negation symbol
				toReturn.append("\u00AC");
			}
			toReturn.append(data.get(i).elem0);
			if(i < data.size() - 1)
			{
				toReturn.append(" v ");
			}
		}
		return toReturn.toString();
	}

	//hashCode and equals auto-generated by Eclipse IDE
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((data == null) ? 0 : data.hashCode());
		return result;
	}
	
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Clause other = (Clause) obj;
		if (data == null) {
			if (other.data != null)
				return false;
		} else if (!data.equals(other.data))
			return false;
		return true;
	}
}

//helper class
class Pair<A, B>
{
	final A elem0;
	final B elem1;
	
	public Pair(A e0, B e1)
	{
		elem0 = e0;
		elem1 = e1;
	}

	//hasCode and equals auto-generated by Eclipse IDE
	public int hashCode() 
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((elem0 == null) ? 0 : elem0.hashCode());
		result = prime * result + ((elem1 == null) ? 0 : elem1.hashCode());
		return result;
	}
	
	public boolean equals(Object obj) 
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Pair<?, ?> other = (Pair<?, ?>) obj;
		if (elem0 == null) {
			if (other.elem0 != null)
				return false;
		} else if (!elem0.equals(other.elem0))
			return false;
		if (elem1 == null) {
			if (other.elem1 != null)
				return false;
		} else if (!elem1.equals(other.elem1))
			return false;
		return true;
	}
}

//helper class Comparator
class Pair_String implements Comparator<Pair<String,Boolean>> 
{
	//sort by strings
	public int compare(Pair<String,Boolean> a, Pair<String,Boolean> b)
	{
		return a.elem0.compareTo(b.elem0);
	}
}